"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var App = function () {
  _createClass(App, null, [{
    key: "PATH",

    /**
     * Provides access to the `applications` version 2 endpoint.
     */
    get: function get() {
      return "/v2/applications";
    }
    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Addition App options.
     */

  }]);

  function App(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, App);

    this.creds = credentials;
    this.options = options;
  }

  _createClass(App, [{
    key: "_convertMethodSignature",
    value: function _convertMethodSignature(name, type, answerUrl, eventUrl, options) {
      var capability = {};
      switch (type) {
        case "voice":
          capability = {
            voice: {
              webhooks: {
                answer_url: {
                  address: answerUrl,
                  http_method: "GET"
                },
                event_url: {
                  address: eventUrl,
                  http_method: "POST"
                }
              }
            }
          };
          break;
        case "messages":
          capability = {
            messages: {
              webhooks: {
                inbound_url: {
                  address: options.inbound_url,
                  http_method: "POST"
                },
                status_url: {
                  address: options.status_url,
                  http_method: "POST"
                }
              }
            }
          };
          break;
        case "rtc":
          capability = {
            rtc: {
              webhooks: {
                event_url: {
                  address: eventUrl,
                  http_method: "POST"
                }
              }
            }
          };
          break;
      }

      return {
        name: name,
        capabilities: capability
      };
    }
  }, {
    key: "_convertApplicationResponse",
    value: function _convertApplicationResponse(application) {
      for (var capability in application.capabilities) {
        application[capability] = {
          webhooks: []
        };
        for (var webhook in application.capabilities[capability].webhooks) {
          application[capability].webhooks.push({
            endpoint_type: webhook,
            endpoint: application.capabilities[capability].webhooks[webhook].address,
            http_method: application.capabilities[capability].webhooks[webhook].http_method
          });
        }
      }

      delete application.capabilities;
      return application;
    }
  }, {
    key: "_convertApplicationListResponse",
    value: function _convertApplicationListResponse(applicationResponseHandler) {
      return function (response) {
        response.count = response.total_items;
        response.page_index = response.page;
        for (var i in response._embedded.applications) {
          response._embedded.applications[i] = applicationResponseHandler(response._embedded.applications[i]);
        }

        return response;
      };
    }

    /**
     * TODO: document
     */

  }, {
    key: "create",
    value: function create(name, type, answerUrl, eventUrl, options, callback) {
      var params = {};
      var responseParser = null;

      if (arguments.length > 2) {
        params = JSON.stringify(this._convertMethodSignature(name, type, answerUrl, eventUrl, options));
        responseParser = this._convertApplicationResponse;
      } else {
        params = JSON.stringify(name);
        callback = type;
      }

      var authorization = this.creds.apiKey + ":" + this.creds.apiSecret;

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: App.PATH,
        method: "POST",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Basic " + Buffer.from(authorization).toString("base64")
        }
      };

      this.options.httpClient.request(config, callback, callback, false, responseParser);
    }

    /**
     * TODO: document
     */

  }, {
    key: "get",
    value: function get(params, callback) {
      var v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var authorization = this.creds.apiKey + ":" + this.creds.apiSecret;
      var responseParser = null;

      if ((typeof params === "undefined" ? "undefined" : _typeof(params)) !== "object") {
        responseParser = this._convertApplicationResponse;
      } else {
        responseParser = this._convertApplicationListResponse(this._convertApplicationResponse);
      }

      if (v2) {
        responseParser = null;
      }

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils2.default.createPathWithQuery(App.PATH, params),
        method: "GET",
        body: undefined,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Basic " + Buffer.from(authorization).toString("base64")
        }
      };

      this.options.httpClient.request(config, callback, callback, false, responseParser);
    }

    /**
     * TODO: document
     */

  }, {
    key: "update",
    value: function update(appId, name, type, answerUrl, eventUrl, options, callback) {
      var params = {};
      var responseParser = null;
      if (arguments.length > 3) {
        params = JSON.stringify(this._convertMethodSignature(name, type, answerUrl, eventUrl, options));
        responseParser = this._convertApplicationResponse;
      } else {
        params = JSON.stringify(name);
        callback = type;
      }

      var authorization = this.creds.apiKey + ":" + this.creds.apiSecret;

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: App.PATH + "/" + appId,
        method: "PUT",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Basic " + Buffer.from(authorization).toString("base64")
        }
      };

      this.options.httpClient.request(config, callback, callback, false, responseParser);
    }

    /**
     * TODO: document
     */

  }, {
    key: "delete",
    value: function _delete(appId, callback) {
      var authorization = this.creds.apiKey + ":" + this.creds.apiSecret;

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: App.PATH + "/" + appId,
        method: "DELETE",
        body: "{}",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Basic " + Buffer.from(authorization).toString("base64")
        }
      };

      this.options.httpClient.request(config, callback);
    }
  }]);

  return App;
}();

exports.default = App;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,