"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _querystring = require("querystring");

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Media = function () {
  _createClass(Media, null, [{
    key: "PATH",
    get: function get() {
      return "/v3/media";
    }
  }]);

  function Media(credentials, options) {
    _classCallCheck(this, Media);

    this.creds = credentials;
    this.options = options;
  }

  _createClass(Media, [{
    key: "upload",
    value: function upload(opts, callback) {
      opts = opts || {};
      if (!opts.file && !opts.url) {
        throw new Error("You must provide either 'file' or 'url' to upload a file");
      }

      if (opts.file) {
        opts.file = _fs2.default.createReadStream(opts.file);
      }
      return this.options.api.postFile(Media.PATH, opts, function (err, response, body) {
        if (err) {
          return callback(err);
        }

        var location = "";
        if (response && response.headers) {
          location = response.headers.location;
        }

        return callback(null, location);
      }, true);
    }
  }, {
    key: "search",
    value: function search(options, callback) {
      if (typeof options == "function" && !callback) {
        callback = options;
        options = {};
      }

      options = options || {};

      return this._makeRequest("GET", Media.PATH, options, {}, callback);
    }

    // If If-Modified-Since header is provided and the data hasn't changed, the
    // user will receive an empty body in the callback, NOT an error

  }, {
    key: "download",
    value: function download(id, headers, callback) {
      if (!callback && typeof headers == "function") {
        callback = headers;
        headers = {};
      }

      return this._makeRequest("GET", Media.PATH + "/" + id, {}, headers, callback, true);
    }
  }, {
    key: "delete",
    value: function _delete(id, callback) {
      return this._makeRequest("DELETE", Media.PATH + "/" + id, {}, {}, callback);
    }
  }, {
    key: "get",
    value: function get(id, callback) {
      return this._makeRequest("GET", Media.PATH + "/" + id + "/info", {}, {}, callback);
    }
  }, {
    key: "update",
    value: function update(id, opts, callback) {
      return this._makeRequest("PUT", Media.PATH + "/" + id + "/info", opts, {}, callback);
    }
  }, {
    key: "_makeRequest",
    value: function _makeRequest(verb, path, options, headers, callback, skipJsonParsing) {
      headers = Object.assign({
        "Content-Type": "application/json",
        Authorization: "Bearer " + this.creds.generateJwt()
      }, headers);

      var req = {};
      if (verb.toUpperCase() === "GET") {
        if (Object.keys(options).length) {
          path = path + "?" + _querystring2.default.stringify(options);
        }
      } else {
        req["body"] = JSON.stringify(options);
      }

      req["path"] = path;
      req["headers"] = headers;

      return this.options.api.request(req, verb, callback, skipJsonParsing);
    }
  }]);

  return Media;
}();

exports.default = Media;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NZWRpYS5qcyJdLCJuYW1lcyI6WyJNZWRpYSIsImNyZWRlbnRpYWxzIiwib3B0aW9ucyIsImNyZWRzIiwib3B0cyIsImNhbGxiYWNrIiwiZmlsZSIsInVybCIsIkVycm9yIiwiY3JlYXRlUmVhZFN0cmVhbSIsImFwaSIsInBvc3RGaWxlIiwiUEFUSCIsImVyciIsInJlc3BvbnNlIiwiYm9keSIsImxvY2F0aW9uIiwiaGVhZGVycyIsIl9tYWtlUmVxdWVzdCIsImlkIiwidmVyYiIsInBhdGgiLCJza2lwSnNvblBhcnNpbmciLCJPYmplY3QiLCJhc3NpZ24iLCJBdXRob3JpemF0aW9uIiwiZ2VuZXJhdGVKd3QiLCJyZXEiLCJ0b1VwcGVyQ2FzZSIsImtleXMiLCJsZW5ndGgiLCJzdHJpbmdpZnkiLCJKU09OIiwicmVxdWVzdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7Ozs7Ozs7SUFFTUEsSzs7O3dCQUNjO0FBQ2hCLGFBQU8sV0FBUDtBQUNEOzs7QUFFRCxpQkFBWUMsV0FBWixFQUF5QkMsT0FBekIsRUFBa0M7QUFBQTs7QUFDaEMsU0FBS0MsS0FBTCxHQUFhRixXQUFiO0FBQ0EsU0FBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0Q7Ozs7MkJBRU1FLEksRUFBTUMsUSxFQUFVO0FBQ3JCRCxhQUFPQSxRQUFRLEVBQWY7QUFDQSxVQUFJLENBQUNBLEtBQUtFLElBQU4sSUFBYyxDQUFDRixLQUFLRyxHQUF4QixFQUE2QjtBQUMzQixjQUFNLElBQUlDLEtBQUosQ0FDSiwwREFESSxDQUFOO0FBR0Q7O0FBRUQsVUFBSUosS0FBS0UsSUFBVCxFQUFlO0FBQ2JGLGFBQUtFLElBQUwsR0FBWSxhQUFHRyxnQkFBSCxDQUFvQkwsS0FBS0UsSUFBekIsQ0FBWjtBQUNEO0FBQ0QsYUFBTyxLQUFLSixPQUFMLENBQWFRLEdBQWIsQ0FBaUJDLFFBQWpCLENBQ0xYLE1BQU1ZLElBREQsRUFFTFIsSUFGSyxFQUdMLFVBQVNTLEdBQVQsRUFB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WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHF1ZXJ5c3RyaW5nIGZyb20gXCJxdWVyeXN0cmluZ1wiO1xuXG5jbGFzcyBNZWRpYSB7XG4gIHN0YXRpYyBnZXQgUEFUSCgpIHtcbiAgICByZXR1cm4gXCIvdjMvbWVkaWFcIjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGNyZWRlbnRpYWxzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5jcmVkcyA9IGNyZWRlbnRpYWxzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICB1cGxvYWQob3B0cywgY2FsbGJhY2spIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICBpZiAoIW9wdHMuZmlsZSAmJiAhb3B0cy51cmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJZb3UgbXVzdCBwcm92aWRlIGVpdGhlciAnZmlsZScgb3IgJ3VybCcgdG8gdXBsb2FkIGEgZmlsZVwiXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmZpbGUpIHtcbiAgICAgIG9wdHMuZmlsZSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0ob3B0cy5maWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcGkucG9zdEZpbGUoXG4gICAgICBNZWRpYS5QQVRILFxuICAgICAgb3B0cyxcbiAgICAgIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2UsIGJvZHkpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxvY2F0aW9uID0gXCJcIjtcbiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmhlYWRlcnMpIHtcbiAgICAgICAgICBsb2NhdGlvbiA9IHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgbG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG5cbiAgc2VhcmNoKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwiZnVuY3Rpb25cIiAmJiAhY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChcIkdFVFwiLCBNZWRpYS5QQVRILCBvcHRpb25zLCB7fSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gSWYgSWYtTW9kaWZpZWQtU2luY2UgaGVhZGVyIGlzIHByb3ZpZGVkIGFuZCB0aGUgZGF0YSBoYXNuJ3QgY2hhbmdlZCwgdGhlXG4gIC8vIHVzZXIgd2lsbCByZWNlaXZlIGFuIGVtcHR5IGJvZHkgaW4gdGhlIGNhbGxiYWNrLCBOT1QgYW4gZXJyb3JcbiAgZG93bmxvYWQoaWQsIGhlYWRlcnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgaGVhZGVycyA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNhbGxiYWNrID0gaGVhZGVycztcbiAgICAgIGhlYWRlcnMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3QoXG4gICAgICBcIkdFVFwiLFxuICAgICAgYCR7TWVkaWEuUEFUSH0vJHtpZH1gLFxuICAgICAge30sXG4gICAgICBoZWFkZXJzLFxuICAgICAgY2FsbGJhY2ssXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIGRlbGV0ZShpZCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3QoXCJERUxFVEVcIiwgYCR7TWVkaWEuUEFUSH0vJHtpZH1gLCB7fSwge30sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldChpZCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3QoXG4gICAgICBcIkdFVFwiLFxuICAgICAgYCR7TWVkaWEuUEFUSH0vJHtpZH0vaW5mb2AsXG4gICAgICB7fSxcbiAgICAgIHt9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlKGlkLCBvcHRzLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChcbiAgICAgIFwiUFVUXCIsXG4gICAgICBgJHtNZWRpYS5QQVRIfS8ke2lkfS9pbmZvYCxcbiAgICAgIG9wdHMsXG4gICAgICB7fSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIF9tYWtlUmVxdWVzdCh2ZXJiLCBwYXRoLCBvcHRpb25zLCBoZWFkZXJzLCBjYWxsYmFjaywgc2tpcEpzb25QYXJzaW5nKSB7XG4gICAgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5jcmVkcy5nZW5lcmF0ZUp3dCgpfWBcbiAgICAgIH0sXG4gICAgICBoZWFkZXJzXG4gICAgKTtcblxuICAgIGxldCByZXEgPSB7fTtcbiAgICBpZiAodmVyYi50b1VwcGVyQ2FzZSgpID09PSBcIkdFVFwiKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoKSB7XG4gICAgICAgIHBhdGggPSBwYXRoICsgXCI/XCIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcVtcImJvZHlcIl0gPSBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXFbXCJwYXRoXCJdID0gcGF0aDtcbiAgICByZXFbXCJoZWFkZXJzXCJdID0gaGVhZGVycztcblxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBpLnJlcXVlc3QocmVxLCB2ZXJiLCBjYWxsYmFjaywgc2tpcEpzb25QYXJzaW5nKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZWRpYTtcbiJdfQ==