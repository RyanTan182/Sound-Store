"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _ShortCode = require("./ShortCode");

var _ShortCode2 = _interopRequireDefault(_ShortCode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var querystring = require("querystring");

var Message = function () {
  _createClass(Message, null, [{
    key: "ERROR_MESSAGES",
    get: function get() {
      return {
        sender: "Invalid from address",
        to: "Invalid to address",
        msg: "Invalid Text Message",
        body: "Invalid Body value in Binary Message",
        udh: "Invalid udh value in Binary Message",
        title: "Invalid title in WAP Push message",
        url: "Invalid url in WAP Push message"
      };
    }
  }, {
    key: "PATH",
    get: function get() {
      return "/sms/json";
    }

    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Addition SMS options.
     */

  }]);

  function Message(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Message);

    this.creds = credentials;
    this.options = options;

    var _shortcode = new _ShortCode2.default(this.creds, this.options);

    this.shortcodeAlert = _shortcode.shortcodeAlert.bind(_shortcode);
    this.shortcode2FA = _shortcode.shortcode2FA.bind(_shortcode);
    this.shortcodeMarketing = _shortcode.shortcodeMarketing.bind(_shortcode);
  }

  _createClass(Message, [{
    key: "_sendRequest",
    value: function _sendRequest(endpoint, method, callback) {
      endpoint.path = endpoint.path + (endpoint.path.indexOf("?") > 0 ? "&" : "?") + querystring.stringify({
        api_key: this.creds.apiKey,
        api_secret: this.creds.apiSecret
      });
      this.options.httpClient.request(endpoint, method, callback);
    }
  }, {
    key: "_sendMessage",
    value: function _sendMessage(data, callback) {
      if (!data.from) {
        _Utils2.default.sendError(callback, new Error(Message.ERROR_MESSAGES.sender));
      } else if (!data.to) {
        _Utils2.default.sendError(callback, new Error(Message.ERROR_MESSAGES.to));
      } else {
        var path = Message.PATH + "?" + querystring.stringify(data);
        this.options.logger.info("sending message from " + data.from + " to " + data.to + " with message " + data.text);
        this._sendRequest({
          host: this.options.restHost || "rest.nexmo.com",
          path: path
        }, "POST", function (err, apiResponse) {
          if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {
            _Utils2.default.sendError(callback, new Error(apiResponse.messages[0]["error-text"]), apiResponse);
          } else {
            if (callback) callback(err, apiResponse);
          }
        });
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "sendSms",
    value: function sendSms(sender, recipient, message, opts, callback) {
      if (!message) {
        _Utils2.default.sendError(callback, new Error(Message.ERROR_MESSAGES.msg));
      } else {
        if (!callback) {
          callback = opts;
          opts = {};
        }
        opts["from"] = sender;
        opts["to"] = recipient;
        opts["text"] = message;
        this._sendMessage(opts, callback);
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "sendBinaryMessage",
    value: function sendBinaryMessage(sender, recipient, body, udh, opts, callback) {
      if (!body) {
        _Utils2.default.sendError(callback, new Error(Message.ERROR_MESSAGES.body));
      } else if (!udh) {
        _Utils2.default.sendError(callback, new Error(Message.ERROR_MESSAGES.udh));
      } else {
        if (!callback) {
          callback = opts;
          opts = {};
        }
        opts["from"] = sender;
        opts["to"] = recipient;
        opts["type"] = "binary";
        opts["body"] = body;
        opts["udh"] = udh;
        this._sendMessage(opts, callback);
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "sendWapPushMessage",
    value: function sendWapPushMessage(sender, recipient, title, url, validity, opts, callback) {
      if (!title) {
        _Utils2.default.sendError(callback, new Error(Message.ERROR_MESSAGES.title));
      } else if (!url) {
        _Utils2.default.sendError(callback, new Error(Message.ERROR_MESSAGES.url));
      } else {
        if (typeof validity === "function") {
          callback = validity;
          opts = {};
          validity = 86400000;
        }
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        }
        opts["from"] = sender;
        opts["to"] = recipient;
        opts["type"] = "wappush";
        opts["title"] = title;
        opts["validity"] = validity;
        opts["url"] = url;
        this._sendMessage(opts, callback);
      }
    }
  }, {
    key: "search",
    value: function search(id, callback) {
      if (typeof id == "string") {
        return this.options.rest.get("/search/message", {
          id: id
        }, callback);
      }

      // Otherwise we expect an array
      return this.options.rest.get("/search/messages", {
        ids: id
      }, callback);
    }
  }, {
    key: "searchRejections",
    value: function searchRejections(to, date, callback) {
      return this.options.rest.get("/search/rejections", {
        to: to,
        date: date
      }, callback);
    }
  }]);

  return Message;
}();

exports.default = Message;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,