"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Pricing = require("./Pricing");

var _Pricing2 = _interopRequireDefault(_Pricing);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Number = function () {
  _createClass(Number, null, [{
    key: "PATH",
    get: function get() {
      return "/number";
    }
  }, {
    key: "ERROR_MESSAGES",
    get: function get() {
      return {
        optionsNotAnObject: "Options parameter should be a dictionary. Check the docs for valid properties for options",
        countrycode: "Invalid Country Code",
        msisdn: "Invalid MSISDN passed"
      };
    }
    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Addition Number options.
     */

  }]);

  function Number(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Number);

    this.creds = credentials;
    this.options = options;

    this._pricing = new _Pricing2.default(credentials, options);
  }

  /**
   * TODO: remove with next major release
   */


  _createClass(Number, [{
    key: "getPricing",
    value: function getPricing() {
      this._pricing.get.apply(this, arguments);
    }

    /**
     * TODO: remove with next major release
     */

  }, {
    key: "getPhonePricing",
    value: function getPhonePricing() {
      this._pricing.getPhone.apply(this, arguments);
    }

    /**
     * TODO: document
     */

  }, {
    key: "get",
    value: function get(options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      } else if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object") {
        _Utils2.default.sendError(callback, new Error(Number.ERROR_MESSAGES.optionsNotAnObject));
      }

      options.api_key = options.api_key || this.creds.apiKey;
      options.api_secret = options.api_secret || this.creds.apiSecret;

      this.options.httpClient.request({
        path: _Utils2.default.createPathWithQuery("/account" + Number.PATH + "s", options)
      }, callback);
    }

    /**
     * TODO: document
     */

  }, {
    key: "search",
    value: function search(countryCode, pattern, callback) {
      var params = {
        api_key: this.creds.apiKey,
        api_secret: this.creds.apiSecret
      };
      if (!countryCode || countryCode.length !== 2) {
        _Utils2.default.sendError(callback, new Error(Number.ERROR_MESSAGES.countrycode));
      } else {
        params["country"] = countryCode;
        if (typeof pattern === "function") {
          callback = pattern;
        } else if ((typeof pattern === "undefined" ? "undefined" : _typeof(pattern)) === "object") {
          for (var arg in pattern) {
            params[arg] = pattern[arg];
          }
        } else {
          params["pattern"] = pattern;
        }
        this.options.httpClient.request({
          path: _Utils2.default.createPathWithQuery(Number.PATH + "/search", params)
        }, callback);
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "buy",
    value: function buy(countryCode, msisdn, callback) {
      if (!countryCode || countryCode.length !== 2) {
        _Utils2.default.sendError(callback, new Error(Number.ERROR_MESSAGES.countrycode));
      } else if (!msisdn) {
        _Utils2.default.sendError(callback, new Error(Number.ERROR_MESSAGES.msisdn));
      } else {
        this.options.httpClient.request({
          path: _Utils2.default.createPathWithQuery(Number.PATH + "/buy", {
            country: countryCode,
            msisdn: msisdn,
            api_key: this.creds.apiKey,
            api_secret: this.creds.apiSecret
          })
        }, "POST", callback);
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "cancel",
    value: function cancel(countryCode, msisdn, callback) {
      if (!countryCode || countryCode.length !== 2) {
        _Utils2.default.sendError(callback, new Error(Number.ERROR_MESSAGES.countrycode));
      } else if (!msisdn) {
        _Utils2.default.sendError(callback, new Error(Number.ERROR_MESSAGES.msisdn));
      } else {
        this.options.httpClient.request({
          path: _Utils2.default.createPathWithQuery(Number.PATH + "/cancel", {
            country: countryCode,
            msisdn: msisdn,
            api_key: this.creds.apiKey,
            api_secret: this.creds.apiSecret
          })
        }, "POST", callback);
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "update",
    value: function update(countryCode, msisdn, params, callback) {
      if (!countryCode || countryCode.length !== 2) {
        _Utils2.default.sendError(callback, new Error(Number.ERROR_MESSAGES.countrycode));
      } else if (!msisdn) {
        _Utils2.default.sendError(callback, new Error(Number.ERROR_MESSAGES.msisdn));
      } else {
        params["country"] = countryCode;
        params["msisdn"] = msisdn;
        params["api_key"] = this.creds.apiKey;
        params["api_secret"] = this.creds.apiSecret;

        this.options.httpClient.request({
          path: _Utils2.default.createPathWithQuery(Number.PATH + "/update", params)
        }, "POST", callback);
      }
    }
  }]);

  return Number;
}();

exports.default = Number;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,