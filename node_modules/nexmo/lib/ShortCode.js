"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var querystring = require("querystring");

/**
 * Provides access to the `ShortCode` endpoint.
 */

var ShortCode = function () {
  _createClass(ShortCode, null, [{
    key: "PATH",
    get: function get() {
      return "/sc/us/${type}/json";
    }
  }, {
    key: "ERROR_MESSAGES",
    get: function get() {
      return {
        to: "Invalid to address",
        msgParams: "Invalid shortcode message parameters"
      };
    }

    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Additional ShortCode options.
     */

  }]);

  function ShortCode(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ShortCode);

    this.creds = credentials;
    this.options = options;
  }

  _createClass(ShortCode, [{
    key: "_sendRequest",
    value: function _sendRequest(endpoint, method, callback) {
      endpoint.path = endpoint.path + (endpoint.path.indexOf("?") > 0 ? "&" : "?") + querystring.stringify({
        api_key: this.creds.apiKey,
        api_secret: this.creds.apiSecret
      });
      this.options.httpClient.request(endpoint, method, callback);
    }
  }, {
    key: "_sendViaShortcode",
    value: function _sendViaShortcode(type, recipient, messageParams, opts, callback) {
      if (!recipient) {
        _Utils2.default.sendError(callback, new Error(ShortCode.ERROR_MESSAGES.to));
      }
      if (!messageParams || !Object.keys(messageParams)) {
        _Utils2.default.sendError(callback, new Error(ShortCode.ERROR_MESSAGES.msgParams));
      }
      opts = opts || {};
      var path = ShortCode.PATH.replace("${type}", type);
      Object.keys(messageParams).forEach(function (key) {
        opts[key] = messageParams[key];
      });
      opts.to = recipient;
      path += "?" + querystring.stringify(opts);
      this.options.logger.info("sending message from shortcode " + type + " to " + recipient + " with parameters " + JSON.stringify(messageParams));
      this._sendRequest({
        host: this.options.restHost || "rest.nexmo.com",
        path: path
      }, "POST", function (err, apiResponse) {
        if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {
          _Utils2.default.sendError(callback, new Error(apiResponse.messages[0]["error-text"]), apiResponse);
        } else {
          if (callback) callback(err, apiResponse);
        }
      });
    }
  }, {
    key: "shortcodeAlert",
    value: function shortcodeAlert(recipient, messageParams, opts, callback) {
      this._sendViaShortcode("alert", recipient, messageParams, opts, callback);
    }
  }, {
    key: "shortcode2FA",
    value: function shortcode2FA(recipient, messageParams, opts, callback) {
      this._sendViaShortcode("2fa", recipient, messageParams, opts, callback);
    }
  }, {
    key: "shortcodeMarketing",
    value: function shortcodeMarketing(recipient, messageParams, opts, callback) {
      this._sendViaShortcode("marketing", recipient, messageParams, opts, callback);
    }
  }]);

  return ShortCode;
}();

exports.default = ShortCode;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TaG9ydENvZGUuanMiXSwibmFtZXMiOlsicXVlcnlzdHJpbmciLCJyZXF1aXJlIiwiU2hvcnRDb2RlIiwidG8iLCJtc2dQYXJhbXMiLCJjcmVkZW50aWFscyIsIm9wdGlvbnMiLCJjcmVkcyIsImVuZHBvaW50IiwibWV0aG9kIiwiY2FsbGJhY2siLCJwYXRoIiwiaW5kZXhPZiIsInN0cmluZ2lmeSIsImFwaV9rZXkiLCJhcGlLZXkiLCJhcGlfc2VjcmV0IiwiYXBpU2VjcmV0IiwiaHR0cENsaWVudCIsInJlcXVlc3QiLCJ0eXBlIiwicmVjaXBpZW50IiwibWVzc2FnZVBhcmFtcyIsIm9wdHMiLCJzZW5kRXJyb3IiLCJFcnJvciIsIkVSUk9SX01FU1NBR0VTIiwiT2JqZWN0Iiwia2V5cyIsIlBBVEgiLCJyZXBsYWNlIiwiZm9yRWFjaCIsImtleSIsImxvZ2dlciIsImluZm8iLCJKU09OIiwiX3NlbmRSZXF1ZXN0IiwiaG9zdCIsInJlc3RIb3N0IiwiZXJyIiwiYXBpUmVzcG9uc2UiLCJzdGF0dXMiLCJtZXNzYWdlcyIsIl9zZW5kVmlhU2hvcnRjb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7QUFFQSxJQUFJQSxjQUFjQyxRQUFRLGFBQVIsQ0FBbEI7O0FBRUE7Ozs7SUFHTUMsUzs7O3dCQUNjO0FBQ2hCLGFBQU8scUJBQVA7QUFDRDs7O3dCQUUyQjtBQUMxQixhQUFPO0FBQ0xDLFlBQUksb0JBREM7QUFFTEMsbUJBQVc7QUFGTixPQUFQO0FBSUQ7O0FBRUQ7Ozs7Ozs7OztBQU1BLHFCQUFZQyxXQUFaLEVBQXVDO0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJOztBQUFBOztBQUNyQyxTQUFLQyxLQUFMLEdBQWFGLFdBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7OztpQ0FFWUUsUSxFQUFVQyxNLEVBQVFDLFEsRUFBVTtBQUN2Q0YsZUFBU0csSUFBVCxHQUNFSCxTQUFTRyxJQUFULElBQ0NILFNB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Ozs7a0JBR1lSLFMiLCJmaWxlIjoiU2hvcnRDb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuXG52YXIgcXVlcnlzdHJpbmcgPSByZXF1aXJlKFwicXVlcnlzdHJpbmdcIik7XG5cbi8qKlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBgU2hvcnRDb2RlYCBlbmRwb2ludC5cbiAqL1xuY2xhc3MgU2hvcnRDb2RlIHtcbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiBcIi9zYy91cy8ke3R5cGV9L2pzb25cIjtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRVJST1JfTUVTU0FHRVMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvOiBcIkludmFsaWQgdG8gYWRkcmVzc1wiLFxuICAgICAgbXNnUGFyYW1zOiBcIkludmFsaWQgc2hvcnRjb2RlIG1lc3NhZ2UgcGFyYW1ldGVyc1wiXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkZW50aWFsc1xuICAgKiAgICBjcmVkZW50aWFscyB0byBiZSB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICBBZGRpdGlvbmFsIFNob3J0Q29kZSBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZGVudGlhbHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkZW50aWFscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgX3NlbmRSZXF1ZXN0KGVuZHBvaW50LCBtZXRob2QsIGNhbGxiYWNrKSB7XG4gICAgZW5kcG9pbnQucGF0aCA9XG4gICAgICBlbmRwb2ludC5wYXRoICtcbiAgICAgIChlbmRwb2ludC5wYXRoLmluZGV4T2YoXCI/XCIpID4gMCA/IFwiJlwiIDogXCI/XCIpICtcbiAgICAgIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh7XG4gICAgICAgIGFwaV9rZXk6IHRoaXMuY3JlZHMuYXBpS2V5LFxuICAgICAgICBhcGlfc2VjcmV0OiB0aGlzLmNyZWRzLmFwaVNlY3JldFxuICAgICAgfSk7XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChlbmRwb2ludCwgbWV0aG9kLCBjYWxsYmFjayk7XG4gIH1cblxuICBfc2VuZFZpYVNob3J0Y29kZSh0eXBlLCByZWNpcGllbnQsIG1lc3NhZ2VQYXJhbXMsIG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFyZWNpcGllbnQpIHtcbiAgICAgIFV0aWxzLnNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKFNob3J0Q29kZS5FUlJPUl9NRVNTQUdFUy50bykpO1xuICAgIH1cbiAgICBpZiAoIW1lc3NhZ2VQYXJhbXMgfHwgIU9iamVjdC5rZXlzKG1lc3NhZ2VQYXJhbXMpKSB7XG4gICAgICBVdGlscy5zZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihTaG9ydENvZGUuRVJST1JfTUVTU0FHRVMubXNnUGFyYW1zKSk7XG4gICAgfVxuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBwYXRoID0gU2hvcnRDb2RlLlBBVEgucmVwbGFjZShcIiR7dHlwZX1cIiwgdHlwZSk7XG4gICAgT2JqZWN0LmtleXMobWVzc2FnZVBhcmFtcykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIG9wdHNba2V5XSA9IG1lc3NhZ2VQYXJhbXNba2V5XTtcbiAgICB9KTtcbiAgICBvcHRzLnRvID0gcmVjaXBpZW50O1xuICAgIHBhdGggKz0gXCI/XCIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkob3B0cyk7XG4gICAgdGhpcy5vcHRpb25zLmxvZ2dlci5pbmZvKFxuICAgICAgXCJzZW5kaW5nIG1lc3NhZ2UgZnJvbSBzaG9ydGNvZGUgXCIgK1xuICAgICAgICB0eXBlICtcbiAgICAgICAgXCIgdG8gXCIgK1xuICAgICAgICByZWNpcGllbnQgK1xuICAgICAgICBcIiB3aXRoIHBhcmFtZXRlcnMgXCIgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShtZXNzYWdlUGFyYW1zKVxuICAgICk7XG4gICAgdGhpcy5fc2VuZFJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5yZXN0SG9zdCB8fCBcInJlc3QubmV4bW8uY29tXCIsXG4gICAgICAgIHBhdGg6IHBhdGhcbiAgICAgIH0sXG4gICAgICBcIlBPU1RcIixcbiAgICAgIGZ1bmN0aW9uKGVyciwgYXBpUmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCFlcnIgJiYgYXBpUmVzcG9uc2Uuc3RhdHVzICYmIGFwaVJlc3BvbnNlLm1lc3NhZ2VzWzBdLnN0YXR1cyA+IDApIHtcbiAgICAgICAgICBVdGlscy5zZW5kRXJyb3IoXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIG5ldyBFcnJvcihhcGlSZXNwb25zZS5tZXNzYWdlc1swXVtcImVycm9yLXRleHRcIl0pLFxuICAgICAgICAgICAgYXBpUmVzcG9uc2VcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyLCBhcGlSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgc2hvcnRjb2RlQWxlcnQocmVjaXBpZW50LCBtZXNzYWdlUGFyYW1zLCBvcHRzLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX3NlbmRWaWFTaG9ydGNvZGUoXCJhbGVydFwiLCByZWNpcGllbnQsIG1lc3NhZ2VQYXJhbXMsIG9wdHMsIGNhbGxiYWNrKTtcbiAgfVxuICBzaG9ydGNvZGUyRkEocmVjaXBpZW50LCBtZXNzYWdlUGFyYW1zLCBvcHRzLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX3NlbmRWaWFTaG9ydGNvZGUoXCIyZmFcIiwgcmVjaXBpZW50LCBtZXNzYWdlUGFyYW1zLCBvcHRzLCBjYWxsYmFjayk7XG4gIH1cbiAgc2hvcnRjb2RlTWFya2V0aW5nKHJlY2lwaWVudCwgbWVzc2FnZVBhcmFtcywgb3B0cywgY2FsbGJhY2spIHtcbiAgICB0aGlzLl9zZW5kVmlhU2hvcnRjb2RlKFxuICAgICAgXCJtYXJrZXRpbmdcIixcbiAgICAgIHJlY2lwaWVudCxcbiAgICAgIG1lc3NhZ2VQYXJhbXMsXG4gICAgICBvcHRzLFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNob3J0Q29kZTtcbiJdfQ==