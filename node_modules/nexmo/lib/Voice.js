"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Voice = function () {
  _createClass(Voice, null, [{
    key: "ERROR_MESSAGES",
    get: function get() {
      return {
        to: "Invalid to address",
        msg: "Invalid Text Message",
        maxDigits: "Invalid max digits for TTS prompt",
        byeText: "Invalid bye text for TTS prompt",
        pinCode: "Invalid pin code for TTS confirm",
        failedText: "Invalid failed text for TTS confirm",
        answerUrl: "Invalid answer URL for call"
      };
    }
    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Addition  options.
     */

  }]);

  function Voice(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Voice);

    this.creds = credentials;
    this.options = options;
  }

  _createClass(Voice, [{
    key: "_sendVoiceMessage",
    value: function _sendVoiceMessage(endpoint, data, callback) {
      if (!data.to) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.to));
      } else {
        data["api_key"] = this.creds.apiKey;
        data["api_secret"] = this.creds.apiSecret;
        this.options.logger.info("sending TTS message to " + data.to + " with message " + data.text);
        this.options.httpClient.request({
          host: endpoint.host,
          path: _Utils2.default.createPathWithQuery(endpoint.path, data)
        }, "POST", function (err, apiResponse) {
          if (!err && apiResponse.status && apiResponse.status > 0) {
            _Utils2.default.sendError(callback, new Error(apiResponse["error-text"]), apiResponse);
          } else {
            if (callback) callback(err, apiResponse);
          }
        });
      }
    }

    /**
     * TODO: document
     */

  }, {
    key: "sendTTSMessage",
    value: function sendTTSMessage(recipient, message, opts, callback) {
      if (!message) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));
      } else {
        if (!opts) {
          opts = {};
        }
        opts["to"] = recipient;
        opts["text"] = message;
        this._sendVoiceMessage({
          host: this.options.apiHost || "api.nexmo.com",
          path: "/tts/json"
        }, opts, callback);
      }
    }

    /**
     * TODO: remove with next major version, API is 404
     */

  }, {
    key: "sendTTSPromptWithCapture",
    value: function sendTTSPromptWithCapture(recipient, message, maxDigits, byeText, opts, callback) {
      if (!message) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));
      } else if (!maxDigits || isNaN(maxDigits) || maxDigits.length > 16) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.maxDigits));
      } else if (!byeText) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.byeText));
      } else {
        if (!opts) {
          opts = {};
        }
        opts["to"] = recipient;
        opts["text"] = message;
        opts["max_digits"] = maxDigits;
        opts["bye_text"] = byeText;
        this._sendVoiceMessage({
          host: this.options.apiHost || "api.nexmo.com",
          path: "/tts-prompt/json"
        }, opts, callback);
      }
    }

    /**
     * TODO: remove with next major version, API is 404
     */

  }, {
    key: "sendTTSPromptWithConfirm",
    value: function sendTTSPromptWithConfirm(recipient, message, maxDigits, pinCode, byeText, failedText, opts, callback) {
      if (!message) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));
      } else if (!maxDigits || isNaN(maxDigits) || maxDigits.length > 16) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.maxDigits));
      } else if (!pinCode || pinCode.length !== maxDigits) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.pinCode));
      } else if (!byeText) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.byeText));
      } else if (!failedText) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.failedText));
      } else {
        if (!opts) {
          opts = {};
        }
        opts["to"] = recipient;
        opts["text"] = message;
        opts["max_digits"] = maxDigits;
        opts["pin_code"] = pinCode;
        opts["bye_text"] = byeText;
        opts["failed_text"] = failedText;
        this._sendVoiceMessage({
          host: this.options.apiHost || "api.nexmo.com",
          path: "/tts-prompt/json"
        }, opts, callback);
      }
    }

    /**
     * TODO: remove with next major version, API is 404
     */

  }, {
    key: "call",
    value: function call(recipient, answerUrl, opts, callback) {
      if (!answerUrl) {
        _Utils2.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.answerUrl));
      } else {
        if (!opts) {
          opts = {};
        }
        opts["to"] = recipient;
        opts["answer_url"] = answerUrl;
        this._sendVoiceMessage({
          host: this.options.restHost || "rest.nexmo.com",
          path: "/call/json"
        }, opts, callback);
      }
    }
  }]);

  return Voice;
}();

exports.default = Voice;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,